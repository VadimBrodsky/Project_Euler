require 'benchmark'

BIG_NUMBER = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

def product_of_digits(number)
  product = 1
  number.to_s.length.times do |i|
    product *= number % 10
    number /= 10
  end
  product
end

def greatest_adjacent_product_v1(number, length)
  input = number.to_s
  largest = 0
  index = 0
  while input.length >= index + length do
    slice = input[index .. index + length - 1]

    product = product_of_digits(slice.to_i)

    if product > largest
      largest = product
      # puts slice
    end
    index += 1
  end
  largest
end


def greatest_adjacent_product_v2(number, length)
  # split the long number into array of digits
  numbers = number.to_s.split(//).map {|i| i.to_i}
  
  # get array of products for each sequence
  products = numbers.each_cons(length).map do |i|
    i.reduce(:*)
  end

  # find the largest one
  products.max
end


# Code benchmark
Benchmark.bm(5) do |bm|
  bm.report('V1: ') do
    greatest_adjacent_product_v1(BIG_NUMBER, 13)
  end

  bm.report('V2: ') do
    greatest_adjacent_product_v2(BIG_NUMBER, 13)
  end
end

puts greatest_adjacent_product_v1(BIG_NUMBER, 13)
puts greatest_adjacent_product_v2(BIG_NUMBER, 13)